using System.ComponentModel;
using System.Drawing.Drawing2D;
using System.Globalization;

namespace SeuNamespace
{
    [DefaultEvent("_textChanged")]
    public partial class StartecTextBox : UserControl
    {
        #region -> Fields
        private Color borderColor = Color.MediumSlateBlue;
        private Color borderFocusColor = Color.HotPink;
        private int borderSize = 2;
        private bool underlinedStyle = false;
        private bool isFocused = false;
        private int borderRadius = 0;
        private Color placeholderColor = Color.DarkGray;
        private string placeholderText = "";
        private bool isPlaceholder = false;
        private bool isPasswordChar = false;
        private int selectionStart = 0;
        private bool maskReal = false;
        private bool maskData = false;
        private bool maskCpf = false;
        private bool maskTel = false;
        private int cursorPosition = 0;
        private string datasalva = "";
      

        public event EventHandler _TextChanged;
        #endregion
        public StartecTextBox()
        {
            InitializeComponent();
        }
        #region -> Properties
        [Category("Star Tec")]
        public Color BorderColor
        {
            get { return borderColor; }
            set
            {
                borderColor = value;
                this.Invalidate();
            }
        }
        [Category("Star Tec")]
        public int SelectionStart
        {
            get { return selectionStart; }
            set
            {
                selectionStart = value;
                this.Invalidate();
            }
        }
        [Category("Star Tec")]
        public Color BorderFocusColor
        {
            get { return borderFocusColor; }
            set { borderFocusColor = value; }
        }
        [Category("Star Tec")]
        public int BorderSize
        {
            get { return borderSize; }
            set
            {
                if (value >= 1)
                {
                    borderSize = value;
                    this.Invalidate();
                }
            }
        }
        [Category("Star Tec")]
        public bool UnderlinedStyle
        {
            get { return underlinedStyle; }
            set
            {
                underlinedStyle = value;
                this.Invalidate();
            }
        }
        [Category("Star Tec")]
        public bool PasswordChar
        {
            get { return isPasswordChar; }
            set
            {
                isPasswordChar = value;
                if (!isPlaceholder)
                    StTextBox.UseSystemPasswordChar = value;
            }
        }
        [Category("Star Tec")]
        public bool Multiline
        {
            get { return StTextBox.Multiline; }
            set { StTextBox.Multiline = value; }
        }
        [Category("Star Tec")]
        public override Color BackColor
        {
            get { return base.BackColor; }
            set
            {
                base.BackColor = value;
                StTextBox.BackColor = value;
            }
        }
        [Category("Star Tec")]
        public override Color ForeColor
        {
            get { return base.ForeColor; }
            set
            {
                base.ForeColor = value;
                StTextBox.ForeColor = value;
            }
        }
        [Category("Star Tec")]
        public override Font Font
        {
            get { return base.Font; }
            set
            {
                base.Font = value;
                StTextBox.Font = value;
                if (this.DesignMode)
                    UpdateControlHeight();
            }
        }
        [Category("Star Tec")]
        public string Texts
        {
            get
            {
                if (isPlaceholder) return "";
                else return StTextBox.Text;
            }
            set
            {
                StTextBox.Text = value;
                SetPlaceholder();
            }
        }
        [Category("Star Tec")]
        public int BorderRadius
        {
            get { return borderRadius; }
            set
            {
                if (value >= 0)
                {
                    borderRadius = value;
                    this.Invalidate();
                }
            }
        }
        [Category("Star Tec")]
        public Color PlaceholderColor
        {
            get { return placeholderColor; }
            set
            {
                placeholderColor = value;
                if (isPlaceholder)
                    StTextBox.ForeColor = value;
            }
        }
        [Category("Star Tec")]
        public string PlaceholderText
        {
            get { return placeholderText; }
            set
            {
                placeholderText = value;
                StTextBox.Text = "";
                SetPlaceholder();
            }
        }
        [Category("Star Tec")]
        public bool MaskReal { get => maskReal; set => maskReal = value; }
        public bool MaskData { get => maskData; set => maskData = value; }
        public bool MaskCpf { get => maskCpf; set => maskCpf = value; }
        public bool MaskTel { get => maskTel; set => maskTel = value; }
        #endregion

        #region -> Overridden methods
        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);
            if (this.DesignMode)
                UpdateControlHeight();
        }
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            UpdateControlHeight();
        }
        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            Graphics graph = e.Graphics;

            if (borderRadius > 1)//Rounded TextBox
            {
                //-Fields
                var rectBorderSmooth = this.ClientRectangle;
                var rectBorder = Rectangle.Inflate(rectBorderSmooth, -borderSize, -borderSize);
                int smoothSize = borderSize > 0 ? borderSize : 1;

                using (GraphicsPath pathBorderSmooth = GetFigurePath(rectBorderSmooth, borderRadius))
                using (GraphicsPath pathBorder = GetFigurePath(rectBorder, borderRadius - borderSize))
                using (Pen penBorderSmooth = new Pen(this.Parent.BackColor, smoothSize))
                using (Pen penBorder = new Pen(borderColor, borderSize))
                {
                    //-Drawing
                    this.Region = new Region(pathBorderSmooth);//Set the rounded region of UserControl
                    if (borderRadius > 15) SetTextBoxRoundedRegion();//Set the rounded region of TextBox component
                    graph.SmoothingMode = SmoothingMode.AntiAlias;
                    penBorder.Alignment = System.Drawing.Drawing2D.PenAlignment.Center;
                    if (isFocused) penBorder.Color = borderFocusColor;

                    if (underlinedStyle) //Line Style
                    {
                        //Draw border smoothing
                        graph.DrawPath(penBorderSmooth, pathBorderSmooth);
                        //Draw border
                        graph.SmoothingMode = SmoothingMode.None;
                        graph.DrawLine(penBorder, 0, this.Height - 1, this.Width, this.Height - 1);
                    }
                    else //Normal Style
                    {
                        //Draw border smoothing
                        graph.DrawPath(penBorderSmooth, pathBorderSmooth);
                        //Draw border
                        graph.DrawPath(penBorder, pathBorder);
                    }
                }
            }
            else //Square/Normal TextBox
            {
                //Draw border
                using (Pen penBorder = new Pen(borderColor, borderSize))
                {
                    this.Region = new Region(this.ClientRectangle);
                    penBorder.Alignment = System.Drawing.Drawing2D.PenAlignment.Inset;
                    if (isFocused) penBorder.Color = borderFocusColor;

                    if (underlinedStyle) //Line Style
                        graph.DrawLine(penBorder, 0, this.Height - 1, this.Width, this.Height - 1);
                    else //Normal Style
                        graph.DrawRectangle(penBorder, 0, 0, this.Width - 0.5F, this.Height - 0.5F);
                }
            }
        }
        #endregion

        #region -> Private methods
        private void SetPlaceholder()
        {
            if (string.IsNullOrWhiteSpace(StTextBox.Text) && placeholderText != "")
            {
                isPlaceholder = true;
                StTextBox.Text = placeholderText;
                StTextBox.ForeColor = placeholderColor;
                if (isPasswordChar)
                    StTextBox.UseSystemPasswordChar = false;
            }
        }
        private void RemovePlaceholder()
        {
            if (isPlaceholder && placeholderText != "")
            {
                isPlaceholder = false;
                StTextBox.Text = "";
                StTextBox.ForeColor = this.ForeColor;
                if (isPasswordChar)
                    StTextBox.UseSystemPasswordChar = true;
            }
        }
        private GraphicsPath GetFigurePath(Rectangle rect, int radius)
        {
            GraphicsPath path = new GraphicsPath();
            float curveSize = radius * 2F;

            path.StartFigure();
            path.AddArc(rect.X, rect.Y, curveSize, curveSize, 180, 90);
            path.AddArc(rect.Right - curveSize, rect.Y, curveSize, curveSize, 270, 90);
            path.AddArc(rect.Right - curveSize, rect.Bottom - curveSize, curveSize, curveSize, 0, 90);
            path.AddArc(rect.X, rect.Bottom - curveSize, curveSize, curveSize, 90, 90);
            path.CloseFigure();
            return path;
        }
        private void SetTextBoxRoundedRegion()
        {
            GraphicsPath pathTxt;
            if (Multiline)
            {
                pathTxt = GetFigurePath(StTextBox.ClientRectangle, borderRadius - borderSize);
                StTextBox.Region = new Region(pathTxt);
            }
            else
            {
                pathTxt = GetFigurePath(StTextBox.ClientRectangle, borderSize * 2);
                StTextBox.Region = new Region(pathTxt);
            }
            pathTxt.Dispose();
        }
        private void UpdateControlHeight()
        {
            if (StTextBox.Multiline == false)
            {
                int txtHeight = TextRenderer.MeasureText("Text", this.Font).Height + 1;
                StTextBox.Multiline = true;
                StTextBox.MinimumSize = new Size(0, txtHeight);
                StTextBox.Multiline = false;

                this.Height = StTextBox.Height + this.Padding.Top + this.Padding.Bottom;
            }
        }
        #endregion

        #region -> TextBox events
        private void StTextBox_TextChanged(object sender, EventArgs e)
        {
            if (maskReal == true) {
                maskData = false;
                maskCpf = false;
                maskTel = false;
                TextBox valor = (TextBox)sender;
                if (decimal.TryParse(valor.Text, NumberStyles.Currency, CultureInfo.CurrentCulture, out decimal valorF))
                {
                    cursorPosition = valor.Text.Length - 3;
                    valor.Text = valorF.ToString("C", CultureInfo.CurrentCulture);
                    if (cursorPosition > valor.Text.Length)
                    {
                        cursorPosition = valor.Text.Length;
                    }
                    valor.SelectionStart = cursorPosition;
                }
            } else if (maskData == true) {
                maskReal = false;
                maskCpf = false;
                maskTel = false;
            }else if(maskCpf == true)
            {
                maskReal = false;
                maskData = false;
                maskTel = false;
            }else if (maskTel == true)
            {
                maskCpf = false;
                maskData = false;
                maskReal = false;
            }
            if (_TextChanged != null)
                _TextChanged.Invoke(sender, e);
        }
        private void StartecTextBox_Click(object sender, EventArgs e)
        {
            this.OnClick(e);
        }
        private void StartecTextBox_MouseEnter(object sender, EventArgs e)
        {
            this.OnMouseEnter(e);
        }
        private void StartecTextBox_MouseLeave(object sender, EventArgs e)
        {
            this.OnMouseLeave(e);
        }
        private void StartecTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {           
            if (maskReal == true)
            {
                TextBox valor = (TextBox)sender;
                if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != ',' && e.KeyChar != '.')
                {
                    e.Handled = true;
                }
                if ((e.KeyChar == ',' || e.KeyChar == '.') && (valor).Text.IndexOf(',') > -1)
                {
                    e.Handled = true;
                }
            }
            if (maskData == true)
            {
                TextBox valor = (TextBox)sender;               
                if (e.KeyChar == (char)Keys.Back || e.KeyChar == (char)Keys.Delete)
                {
                    datasalva = "";
                }
                else
                {
                    if (valor.Text.Length == 2)
                    {
                        valor.Text += "/";
                        cursorPosition = valor.Text.Length;
                        valor.SelectionStart = cursorPosition;
                    }
                    if (valor.Text.Length == 5)
                    {
                        valor.Text += "/";
                        cursorPosition = valor.Text.Length;
                        valor.SelectionStart = cursorPosition;
                    }
                    if (valor.Text.Length == 9)
                    {
                        datasalva = valor.Text;
                        cursorPosition = valor.Text.Length;
                        valor.SelectionStart = cursorPosition;
                    }
                    if (valor.Text.Length > 9) {
                        valor.Text = datasalva;
                        cursorPosition = valor.Text.Length;
                        valor.SelectionStart = cursorPosition;
                    }
                }
            }
            if (maskCpf == true)
            {
                TextBox valor = (TextBox)sender;

                    if (valor.Text.Length == 3 )
                    {
                    cursorPosition = valor.Text.Length;
                    valor.SelectionStart = cursorPosition;
                    valor.Text += ".";
                    }
                    if (valor.Text.Length == 7)
                    {
                    cursorPosition = valor.Text.Length;
                    valor.SelectionStart = cursorPosition;
                    valor.Text += ".";
                    }

                    if (valor.Text.Length == 11)
                    {
                        valor.Text += "-";
                    }

                    if (valor.Text.Length == 14)
                    {
                        valor.Text = FormatarCnpj(valor.Text);
                    }             
                    if (valor.Text.Length == 15)
                    {
                        valor.Text += "-";
                    }
                    cursorPosition = valor.Text.Length;
                    valor.SelectionStart = cursorPosition;
            }
            if(maskTel == true)
            {
                TextBox valor = (TextBox)sender;
                if (valor.Text.Length == 2)
                {
                   valor.Text = FormatarCell(valor.Text);
                }
                cursorPosition = valor.Text.Length;
                valor.SelectionStart = cursorPosition;
            }
                this.OnKeyPress(e);
        }      
        private void StTextBox_Enter(object sender, EventArgs e)
        {
            isFocused = true;
            this.Invalidate();
            RemovePlaceholder();
        }
        private void StartecTextBox_Leave(object sender, EventArgs e)
        {
            isFocused = false;
            this.Invalidate();
            SetPlaceholder();
        }
        ///::::+
        #endregion

        #region -> Others
        private string FormatarCnpj(string cpf)
        {
            string cpfSemPonto = cpf.Replace(".", "");
            string cpfSemTraco = cpfSemPonto.Replace("-", "");
            char[] chars = cpfSemTraco.ToCharArray();
            chars = AdicionarCaractereNoMeio(chars, 2, '.');
            chars = AdicionarCaractereNoMeio(chars, 6, '.');
            chars = AdicionarCaractereNoMeio(chars, 10, '/');
            string cnpjFormatado = "";

            for (int i = 0; i < chars.Length; i++)
            {
                cnpjFormatado += chars[i];
            }
            return cnpjFormatado;
        }
        private string FormatarCell(string cell)
        {
            char[] chars = cell.ToCharArray();
            chars = AdicionarCaractereNoMeio(chars, 0, '(');
            chars = AdicionarCaractereNoMeio(chars, 3, ')');
            //chars = AdicionarCaractereNoMeio(chars, 4, ' '); caso quiser adicionar o espaço depois do DDD
            string cellFormatado = "";

            for (int i = 0; i < chars.Length; i++)
            {
                cellFormatado += chars[i];
            }
            return cellFormatado;
        }
        static char[] AdicionarCaractereNoMeio(char[] array, int posicao, char caractere)
        {
            List<char> lista = new List<char>(array);
            lista.Insert(posicao, caractere);
            array = lista.ToArray();
            return array;
        }
        #endregion
    }
}
